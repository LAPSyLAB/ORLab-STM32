
stm32f4-asm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  20000000  20000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000000ec  20000188  20000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  20000274  20000288  00010288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  20000274  20000274  00010288  2**0
                  CONTENTS
  4 .ARM          00000000  20000274  20000274  00010288  2**0
                  CONTENTS
  5 .preinit_array 00000000  20000274  20000288  00010288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  20000274  20000274  00010274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  20000278  20000278  00010278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  2000027c  2000027c  0001027c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010288  2**0
                  CONTENTS
 10 .bss          0000001c  20000288  20000288  00010288  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002a4  200002a4  00010288  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010288  2**0
                  CONTENTS, READONLY
 13 .debug_line   000000e5  00000000  00000000  000102b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00000048  00000000  00000000  0001039d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000026  00000000  00000000  000103e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000048  00000000  00000000  00010410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000000b2  00000000  00000000  00010458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000020  00000000  00000000  00010510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

20000188 <__do_global_dtors_aux>:
20000188:	b510      	push	{r4, lr}
2000018a:	4c05      	ldr	r4, [pc, #20]	; (200001a0 <__do_global_dtors_aux+0x18>)
2000018c:	7823      	ldrb	r3, [r4, #0]
2000018e:	b933      	cbnz	r3, 2000019e <__do_global_dtors_aux+0x16>
20000190:	4b04      	ldr	r3, [pc, #16]	; (200001a4 <__do_global_dtors_aux+0x1c>)
20000192:	b113      	cbz	r3, 2000019a <__do_global_dtors_aux+0x12>
20000194:	4804      	ldr	r0, [pc, #16]	; (200001a8 <__do_global_dtors_aux+0x20>)
20000196:	f3af 8000 	nop.w
2000019a:	2301      	movs	r3, #1
2000019c:	7023      	strb	r3, [r4, #0]
2000019e:	bd10      	pop	{r4, pc}
200001a0:	20000288 	.word	0x20000288
200001a4:	00000000 	.word	0x00000000
200001a8:	2000025c 	.word	0x2000025c

200001ac <frame_dummy>:
200001ac:	b508      	push	{r3, lr}
200001ae:	4b03      	ldr	r3, [pc, #12]	; (200001bc <frame_dummy+0x10>)
200001b0:	b11b      	cbz	r3, 200001ba <frame_dummy+0xe>
200001b2:	4903      	ldr	r1, [pc, #12]	; (200001c0 <frame_dummy+0x14>)
200001b4:	4803      	ldr	r0, [pc, #12]	; (200001c4 <frame_dummy+0x18>)
200001b6:	f3af 8000 	nop.w
200001ba:	bd08      	pop	{r3, pc}
200001bc:	00000000 	.word	0x00000000
200001c0:	2000028c 	.word	0x2000028c
200001c4:	2000025c 	.word	0x2000025c

200001c8 <main>:
  		.type  main, %function
  		.global main

   	   	.align
main:
  		ldr r0, =STEV1   // Naslov od STEV1 -> r0
200001c8:	4804      	ldr	r0, [pc, #16]	; (200001dc <__end+0x4>)
  		ldr r1, [r0]    // Vsebina iz naslova v r0 -> r1
200001ca:	6801      	ldr	r1, [r0, #0]

  		ldr r0, =STEV2   // Naslov od STEV1 -> r0
200001cc:	4804      	ldr	r0, [pc, #16]	; (200001e0 <__end+0x8>)
  		ldr r2, [r0]	// Vsebina iz naslova v r0 -> r2
200001ce:	6802      	ldr	r2, [r0, #0]

  		add r3,r1,r2    // r1 + r2 -> r3
200001d0:	eb01 0302 	add.w	r3, r1, r2

  		ldr r0, =VSOTA   // Naslov od STEV1 -> r0
200001d4:	4803      	ldr	r0, [pc, #12]	; (200001e4 <__end+0xc>)
  		str r3,[r0]		// iz registra r3 -> na naslov v r0
200001d6:	6003      	str	r3, [r0, #0]

200001d8 <__end>:

__end: 	b 	__end
200001d8:	e7fe      	b.n	200001d8 <__end>
200001da:	0000      	.short	0x0000
  		ldr r0, =STEV1   // Naslov od STEV1 -> r0
200001dc:	2000027c 	.word	0x2000027c
  		ldr r0, =STEV2   // Naslov od STEV1 -> r0
200001e0:	20000280 	.word	0x20000280
  		ldr r0, =VSOTA   // Naslov od STEV1 -> r0
200001e4:	20000284 	.word	0x20000284

200001e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
200001e8:	f8df d048 	ldr.w	sp, [pc, #72]	; 20000234 <LoopFillZerobss+0x26>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
200001ec:	4812      	ldr	r0, [pc, #72]	; (20000238 <LoopFillZerobss+0x2a>)
  ldr r1, =_edata
200001ee:	4913      	ldr	r1, [pc, #76]	; (2000023c <LoopFillZerobss+0x2e>)
  ldr r2, =_sidata
200001f0:	4a13      	ldr	r2, [pc, #76]	; (20000240 <LoopFillZerobss+0x32>)
  movs r3, #0
200001f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
200001f4:	e002      	b.n	200001fc <LoopCopyDataInit>

200001f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
200001f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
200001f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
200001fa:	3304      	adds	r3, #4

200001fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
200001fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
200001fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
20000200:	d3f9      	bcc.n	200001f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
20000202:	4a10      	ldr	r2, [pc, #64]	; (20000244 <LoopFillZerobss+0x36>)
  ldr r4, =_ebss
20000204:	4c10      	ldr	r4, [pc, #64]	; (20000248 <LoopFillZerobss+0x3a>)
  movs r3, #0
20000206:	2300      	movs	r3, #0
  b LoopFillZerobss
20000208:	e001      	b.n	2000020e <LoopFillZerobss>

2000020a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
2000020a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
2000020c:	3204      	adds	r2, #4

2000020e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
2000020e:	42a2      	cmp	r2, r4
  bcc FillZerobss
20000210:	d3fb      	bcc.n	2000020a <FillZerobss>

// Initialize DWT counters - added for cycle measurements
  ldr r0, =DEMCR
20000212:	480e      	ldr	r0, [pc, #56]	; (2000024c <LoopFillZerobss+0x3e>)
  ldr r1, [r0]
20000214:	6801      	ldr	r1, [r0, #0]
  orr r1,r1,#(1<<24)  // Enabling TRCENA bit (is already on according to SFRs)
20000216:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  str r1, [r0]
2000021a:	6001      	str	r1, [r0, #0]

  ldr r0, =DWT_CYCCNT
2000021c:	480c      	ldr	r0, [pc, #48]	; (20000250 <LoopFillZerobss+0x42>)
  mov r3,#0
2000021e:	f04f 0300 	mov.w	r3, #0
  str r3,[r0]
20000222:	6003      	str	r3, [r0, #0]

  ldr r0, =DWT_CTRL
20000224:	480b      	ldr	r0, [pc, #44]	; (20000254 <LoopFillZerobss+0x46>)
  ldr r2, [r0]
20000226:	6802      	ldr	r2, [r0, #0]
  orr r2,r2,#1      // Enabling CYCCNTENA bit
20000228:	f042 0201 	orr.w	r2, r2, #1
  str r2, [r0]
2000022c:	6002      	str	r2, [r0, #0]

/* Call the application's entry point.*/
//eternal:  b  eternal
  bl  main
2000022e:	f7ff ffcb 	bl	200001c8 <main>
  bx  lr
20000232:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
20000234:	20020000 	.word	0x20020000
  ldr r0, =_sdata
20000238:	2000027c 	.word	0x2000027c
  ldr r1, =_edata
2000023c:	20000288 	.word	0x20000288
  ldr r2, =_sidata
20000240:	2000027c 	.word	0x2000027c
  ldr r2, =_sbss
20000244:	20000288 	.word	0x20000288
  ldr r4, =_ebss
20000248:	200002a4 	.word	0x200002a4
  ldr r0, =DEMCR
2000024c:	e000edfc 	.word	0xe000edfc
  ldr r0, =DWT_CYCCNT
20000250:	e0001004 	.word	0xe0001004
  ldr r0, =DWT_CTRL
20000254:	e0001000 	.word	0xe0001000

20000258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
20000258:	e7fe      	b.n	20000258 <ADC_IRQHandler>
	...

2000025c <_init>:
2000025c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000025e:	bf00      	nop
20000260:	bcf8      	pop	{r3, r4, r5, r6, r7}
20000262:	bc08      	pop	{r3}
20000264:	469e      	mov	lr, r3
20000266:	4770      	bx	lr

20000268 <_fini>:
20000268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000026a:	bf00      	nop
2000026c:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000026e:	bc08      	pop	{r3}
20000270:	469e      	mov	lr, r3
20000272:	4770      	bx	lr
